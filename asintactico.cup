/* ---------------Seccion de declaraciones preliminares--------------------*/
package ejemplocup;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***\n");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
   
terminal   LLAVEIZQ, LLAVEDER, PARENTESISIZQ, PARENTESISDER, CORCHETEIZQ, CORCHETEDER,  COMILLASIMPLE, COMILLADOBLE, PUNTO, COMA, PUNTOYCOMA, MAYOR, MENOR, ASIGNACION, IGUAL, DIFERENTE, MAS, MENOS, MULTIPLICACION, DIVISION, ECHO, ARRAY, AND, OR, BREAK, CASE, FINAL, DO, ELSE, ELSEIF, ENDFOR, ENDIF, ENDSWITCH, ENDWHILE, SWITCH, WHILE, FOR, FUNCTION, IF, DECREMENTO, INCREMENTO, INCLUDE, MAYORIGUAL, IDENTICO, NOIDENTICO, MENORIGUAL, INICIO, PRINT, RETURN, STATIC, DIGITO, LETRA, CADENA, FLOAT, VARIABLE, MF, CARACTER, MD;
   
/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */

non terminal Object    expr_list, expr_part;
                       
/* -------------Seccion de predencia y asociacion de los terminales----------- */
   
/*
  Precedencia de los no terminales, no sirve con simbolos terminales.
  Por eso no la usamos. Adem√°s indica si se asocia a izquierda o derecha.
*/
  
expr_list ::= expr_list expr_part
            | expr_part
			;

expr_part ::= expr_tipo_de_dato PUNTOYCOMA {:System.out.println(" <--- Sintaxis Correcta");:};
		 
/***********************************************/

